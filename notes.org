
* load acts on *DEFAULT-PATHNAME-DEFAULTS*
* linux standard directory can be set via ext:chdir
* public member variables:
  template <class C, class D>
  class_ &def_readonly(const char *name, D C::*mem_ptr) {
    typedef detail::property_registration<T, D C::*, detail::null_type>
        registration_type;

    this->add_member(
        new registration_type(name, mem_ptr, detail::null_type()));
    return *this;
  }
* conversion
T_sp arg = oCar(list);
if ( arg.fixnump() ) {
// use arg.unsafe_fixnum()
} else if ( Double_sp darg = arg.asOrNull<DoubleFloat_O>() ) {
// Use the value in darg
} else if ( Ratio_sp rarg = arg.asOrNull<Ratio_O>() ) {
// Use the value in rarg
}
* exposed c++ classes: a little documentation
drmeister	Hello
01:57:23	drmeister	SAL9000: Are you online?
03:16:54	SAL9000	drmeister: yes
03:17:26	drmeister	Hey, I sent you an email explaining what I've been up to the last couple of days.
03:17:38	SAL9000	Yeah, I got that. Thanks for clearing up the confusion :-)
03:17:42	SAL9000	and thanks for the 'referral'
03:18:19	drmeister	No problem. It's an interesting opportunity.
03:21:27	drmeister	Anyway, you don't want to be messing with what I'm doing at the moment, tracking down dozens of #include's that now need to have #ifndef SCRAPING/#endif wrapped around them in order to allow the preprocessor to be run on them before the #include file is available. And then inserting back by hand the extern's that the include file provided.
03:22:04	drmeister	Compiling, waiting 10 minutes and then going in and fixing fresh batch of compile errors.
03:22:07	SAL9000	#include's for scraper-generated files?
03:22:50	drmeister	Yeah, I'm doing the symbols now. The scraper generates symbols_scraped_inc.h and it's included in about 50 places in the code.
03:23:40	SAL9000	wouldn't it be easier to write a 'stub' version of symbols_scraped_inc.h, then run the C preprocessor and scraper to generate the "real" one?
03:24:03	drmeister	/me stares blankly at SAL9000
03:24:19	drmeister	Uh - yeah, that's a good idea now.
03:24:49	SAL9000	I know that feeling, having often been the victim of Greenspun's Tenth
03:26:35	drmeister	You make good suggestions - thank you.
03:30:28	drmeister	Anyway, if you still think it's a good idea to automatically generate template specializations and compile them on the fly - I can see a path to doing that and it leads right through "clang-interpreter". https://github.com/llvm-mirror/clang/tree/master/examples/clang-interpreter
03:31:09	drmeister	I think you were the person who first raised the question whether it was possible and part of Clasp.
03:34:54	drmeister	Or the ASTMatcher library is waiting to be exploited - but it some cleanup and documentation. It's the src/lisp/clasp-analyzer/clang-tool.lsp file. I was going to pull it out and make it its own module.
03:35:37	SAL9000	Pulling it out would also provide a good example of modules exposing C++ things to Clasp.
03:36:19	SAL9000	Am I correct in my assumption that clang-tool.lsp is only providing a Lispy wrapper around the raw C++ API as exposed by the scraper etc.?
03:39:12	drmeister	Yes - a lispy wrapper in some places and an attempt leverage the power of Common Lisp with the ASTMatcher library to make something more expressive.
03:40:35	drmeister	There is a struct called a "multitool" that you can throw multiple clang tools into and they will all operate on a set of files.
03:42:15	drmeister	So you don't have to make multiple passes of the files.
03:42:27	drmeister	There's also code to run submatchers within a match.
03:42:51	drmeister	Also code to help write ast-matchers.
03:43:32	drmeister	You can insert special keywords within an ast-matcher and the code will suggest matchers that are applicable at that place in the expression.
03:43:46	drmeister	There's also code to convert the CL style ast-matchers into C++ style matchers.
03:44:13	SAL9000	convert as in source code or as in objects?
03:44:56	drmeister	Generate a C++ expression that creates a matcher that does the same thing as the S-expression matcher that you build within Clasp.
03:45:12	drmeister	All those nested C++ functors.
03:45:16	drmeister	Nasty.
03:46:08	drmeister	At the time though I had a lot of questions about how to write matchers and the only people I could talk to were on #llvm - and it's better to give them ASTMatchers in the C++ style that they are used to.
03:46:19	SAL9000	Okay, so you are generating strings of source code, makes sense
03:46:48	drmeister	Right. There is a 1:1 correspondence between CL S-expression style matchers and C++ style matchers.
03:47:45	SAL9000	Is the clang-tool "API" more-or-less stable now?
03:50:07	drmeister	Yes. And it's very close to the C++ API with bit of extra CL flair.
03:51:05	drmeister	It also works very reliably. The clang-analyzer has run a hundred times and it just keeps working.
03:51:41	drmeister	There is one wrinkle. It needs a few more hours of my time to make it work with boehm/cclasp.
03:52:38	drmeister	It runs using the boehmdc version of clasp (uses dynamic_cast for everything). The MatchCallback (and other derivable classes) are not currently being seen as inheriting from Instance_O. That's messes up with generic function dispatch. T
03:52:46	drmeister	Whoops.
03:52:53	drmeister	It runs using the boehmdc version of clasp (uses dynamic_cast for everything).
03:54:24	drmeister	With the "boehm" version of clasp (uses the tagged_cast generated by clasp-analyzer) the tagged_cast facility doesn't indicate that MatchCallback and other derivable classes inherit from Instance_O. That messes up generic function dispatch.
03:54:53	SAL9000	Instance_O is "any C++ instance in CL"?
03:55:01	drmeister	boehmdc is used for bootstrapping. I can probably fix this on the weekend.
03:55:20	drmeister	Instance_O is any CLOS instance or DEFSTRUCT instance in CL.
03:55:55	drmeister	derivable classes inherit from it so that you can derive from a C++ class and add CLOS slots to it.
03:55:59	drmeister	MatchCallback uses it.
03:56:30	drmeister	I added that facility because lots of C++ libraries require the programmer to subclass library classes.
03:57:26	drmeister	The ASTMatcher library require the programmer to subclass MatchCallback and provide virtual functions to be called during the AST traversal.
03:57:44	drmeister	This all works in Clasp but currently just with the bootstrapping version of Clasp.
03:58:50	drmeister	If/when stassats starts writing his scraping code to build an FFI for Qt he's going to run into this and I'm going to catch merry hell from him about it if I haven't fixed it soon.
03:59:00	drmeister	Oh boy, the cats out of the bag now.
03:59:06	drmeister	(hi stassats)
04:00:18	drmeister	Anyway, I've got the worst of the problem fixed. Instances of these derivable classes also need to be managed manually and not cleaned up or moved (in the case of MPS) by the garbage collector. That problem I've solved.
04:00:56	SAL9000	Do MatchCallback etc. inherit from something else? If so, tagged_cast could be special-cased to suit
04:01:03	drmeister	All that remains is adding a mechanism to tell the isA relationship tester that every instance of a derivable class inherits from Instance_O.
04:02:13	drmeister	Yes, MatchCallback also inherits from the C++ MatchCallback class. It's a rare (and always troublesome) example of multiple C++ inheritance in Clasp.
04:04:14	drmeister	I'm being sloppy with names. In CL it's match-callback. In C++ it's DerivableMatchCallback...
04:04:15	drmeister	https://www.irccloud.com/pastebin/NuFtN26X/
04:04:56	drmeister	From clasp/include/clasp/clbind/derivable.h
04:04:58	drmeister	https://www.irccloud.com/pastebin/n4keZMrX/
04:06:12	drmeister	So match-callback in CL is the exposed version of DerivableMatchCallback which is derived from clbind::Derivable<clang::ast_matchers::MatchFinder::MatchCallback> which derives from both core::Instance_O (clasp) and the Alien Class which is clang::ast_matchers::MatchFinder::MatchCallback
04:07:05	drmeister	Holy crap, how did I paint myself into this complicated little corner. - I know - it's the only way to make this work.
04:07:11	SAL9000	Okay, so the last non-multiple inheritance in that chain is clbind::Derivable
04:07:18	SAL9000	does tagged_cast work with clbind::Derivable?
04:08:43	drmeister	Not yet - that's what I/we need to do - make it work with clbind::Derivable. A template specialized version of tagged_cast that says "anything that derives from clbind::Derivable derives from Instance_O" would do the job.
04:09:44	SAL9000	Why would tagged_cast need to be template-specialized?
04:09:52	SAL9000	oh, nvm, misunderstood
04:10:09	drmeister	There are some special cases like that in the code.
04:10:25	drmeister	Sorry it's called TaggedCast - not tagged_cast (ugh)
04:10:42	drmeister	clasp/include/clasp/gctools/other_tagged_casts.h is one place where there are some of these.
04:10:53	drmeister	It's a little more complicated as well. And this is where I have to do some thinking.
04:12:54	drmeister	What I think I need for these naive libraries is to assign special KIND values (the 8-byte word written in the header of every object on the heap) that indicate that they are derived from Instance_O. I need to do this so that we don't need to run the static analyzer on binding libraries to assign KIND values. That's what is currently happening with the
04:12:54	drmeister	asttooling library.
04:13:18	drmeister	It's probably the trickiest aspect of C++/CL interoperation.
04:13:43	drmeister	Sorry to trouble you with this. It's helpful to lay it out though.
04:14:11	SAL9000	It's fine - being a bit removed from the problem I'm likely to see it from a different perspective and thus come up with something possibly useful :-)
04:14:44	drmeister	That's been a pattern.
04:15:32	drmeister	So that all being said. This all works fine with the boehmdc version which runs fine albeit a bit slower than the boehm version.
04:15:51	SAL9000	Hmm... is it possible to build boehm-cleavir-dc?
04:16:25	drmeister	Yes, I rarely bother.
04:18:09	drmeister	I should try it again as an experiment. Maybe the investment in compiling cclasp with boehmdc would pay itself back by running clasp-analyzer faster.
04:18:47	drmeister	I typically compile just up to bclasp with boehmdc and then run the static analyzer with that.
04:19:15	SAL9000	It makes sense in terms of overall compilation speed, but while cclasp can't use clang-tool.lsp it may be useful to compile cclasp-dc
04:20:00	drmeister	Yes. I haven't tried it since stassats sped up the compiler by ~3x
04:20:45	drmeister	cclasp does generate much faster code than bclasp. It could be well worth it.
04:22:38	drmeister	What I was planning to do was say all KIND values < 16384 are hard-wired, determined by clasp-analyzer and KIND values >= are for derivable classes and CLOS classes (all inherit from Instance_O). Then anything with a KIND value >=16384 inherits from Instance_O.
04:23:13	drmeister	That number is arbitrary and just needs to be large enough for the builtin C++ classes.
04:23:55	drmeister	This would also lay more of the foundation to support beach's multiple dispatch approach.
04:26:03	SAL9000	How many builtin C++ classes are you expecting?
04:27:21	drmeister	Cando currently has 595. But the first Instance_O KIND value could start at that + 1.
04:28:16	SAL9000	It'd probably be best to use a power of two.
04:29:39	drmeister	Yep. I don't know if it would be faster to use a bitmask to determine Instance_O'ness
04:30:19	drmeister	I'm still not sold on the multiple inheritance thing either. It's a nasty language feature in a language like C++.
04:30:54	drmeister	Diamond patterns, multiple vtables, virtual inheritance. It gets complicated fast.
* calling conventions & calling lisp code from c++
The approach Clasp takes is different from that.
19:57:10	drmeister	The final callee has a fixed argument list.
19:58:10	drmeister	In the code there is a lambda list that is parsed at startup and turned into an instance of a C++ class called LambdaListHandler_O.
19:59:13	drmeister	A call to a function starts with a call to a wrapper that has a complicated signature.
19:59:16	jackdaniel	I believe that you might find how ECL handles keywords by an example. DPP mangler works with the keys as well
20:00:38	drmeister	(core::T_O *dummyEnv, core::T_O *dummyArgList, std::size_t lcc_nargs, core::T_O *lcc_fixed_arg0, core::T_O *lcc_fixed_arg1, core::T_O *lcc_fixed_arg2, ...)
20:01:11	drmeister	It uses the fact that the first six arguments are passed in registers to speed up simple calls.
20:01:47	drmeister	These arguments are translated into the signature of the callee using the LambdaListHandler_O and C++ template code.
20:01:55	drmeister	Then the callee is called.
20:02:54	drmeister	In the simplest cases <=3 fixed arguments it just passes the arguments in registers straight to the callee.
20:03:34	drmeister	But the LambdaListHandler_O does all the &optional, &rest, &key, &aux processing.
20:04:48	drmeister	It feels a little over-engineered but the nice thing about it is you can write C++ functions in a natural way like int foo(int x, int y) and call that straight from CL.
20:05:14	jackdaniel	how do you call CL functions from C++?
20:05:26	drmeister	eval::funcall(symbol, args...)
20:05:41	drmeister	or eval::apply(func-desig,args...)
20:05:57	jackdaniel	and with the keyword arguments?
20:06:13	drmeister	The writing C++ functions like int foo(int x, int y) is what I mean by seamless integration with C++.
20:06:54	jackdaniel	yeah, sorry. I've just jumped mentaly into the calling topic
20:07:18	drmeister	With keyword arguments you go: eval::funcall(_sym_foo,kw::_sym_x,clasp_make_fixnum(1), kw::_sym_y,clasp_make_fixnum(2)) to call (defun foo (&key x y) ...)
20:07:42	jackdaniel	OK
20:08:52	drmeister	So in the worst case I think Clasp creates a copy of the arguments for every call. But in the best (very common) case Clasp just passes arguments in registers straight from CL to C++.
20:09:36	jackdaniel	sounds good
20:10:08	drmeister	This was helpful to refresh memory.
